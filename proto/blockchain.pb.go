// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: proto/blockchain.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Block struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          []byte                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	PrevHash      []byte                 `protobuf:"bytes,2,opt,name=prev_hash,json=prevHash,proto3" json:"prev_hash,omitempty"`
	MerkleRoot    []byte                 `protobuf:"bytes,3,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	Timestamp     int64                  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // other fields
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Block) Reset() {
	*x = Block{}
	mi := &file_proto_blockchain_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_proto_blockchain_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_proto_blockchain_proto_rawDescGZIP(), []int{0}
}

func (x *Block) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Block) GetPrevHash() []byte {
	if x != nil {
		return x.PrevHash
	}
	return nil
}

func (x *Block) GetMerkleRoot() []byte {
	if x != nil {
		return x.MerkleRoot
	}
	return nil
}

func (x *Block) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type BlockProposal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Block         *Block                 `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockProposal) Reset() {
	*x = BlockProposal{}
	mi := &file_proto_blockchain_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockProposal) ProtoMessage() {}

func (x *BlockProposal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_blockchain_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockProposal.ProtoReflect.Descriptor instead.
func (*BlockProposal) Descriptor() ([]byte, []int) {
	return file_proto_blockchain_proto_rawDescGZIP(), []int{1}
}

func (x *BlockProposal) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

type Vote struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accepted      bool                   `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
	BlockHash     []byte                 `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vote) Reset() {
	*x = Vote{}
	mi := &file_proto_blockchain_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vote) ProtoMessage() {}

func (x *Vote) ProtoReflect() protoreflect.Message {
	mi := &file_proto_blockchain_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vote.ProtoReflect.Descriptor instead.
func (*Vote) Descriptor() ([]byte, []int) {
	return file_proto_blockchain_proto_rawDescGZIP(), []int{2}
}

func (x *Vote) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

func (x *Vote) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

var File_proto_blockchain_proto protoreflect.FileDescriptor

const file_proto_blockchain_proto_rawDesc = "" +
	"\n" +
	"\x16proto/blockchain.proto\x12\n" +
	"blockchain\"w\n" +
	"\x05Block\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\fR\x04hash\x12\x1b\n" +
	"\tprev_hash\x18\x02 \x01(\fR\bprevHash\x12\x1f\n" +
	"\vmerkle_root\x18\x03 \x01(\fR\n" +
	"merkleRoot\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x03R\ttimestamp\"8\n" +
	"\rBlockProposal\x12'\n" +
	"\x05block\x18\x01 \x01(\v2\x11.blockchain.BlockR\x05block\"A\n" +
	"\x04Vote\x12\x1a\n" +
	"\baccepted\x18\x01 \x01(\bR\baccepted\x12\x1d\n" +
	"\n" +
	"block_hash\x18\x02 \x01(\fR\tblockHash2\x90\x01\n" +
	"\x11BlockchainService\x12;\n" +
	"\fProposeBlock\x12\x19.blockchain.BlockProposal\x1a\x10.blockchain.Vote\x12>\n" +
	"\x0eGetBlockByHash\x12\x19.blockchain.BlockProposal\x1a\x11.blockchain.BlockB\x15Z\x13go-blockchain/protob\x06proto3"

var (
	file_proto_blockchain_proto_rawDescOnce sync.Once
	file_proto_blockchain_proto_rawDescData []byte
)

func file_proto_blockchain_proto_rawDescGZIP() []byte {
	file_proto_blockchain_proto_rawDescOnce.Do(func() {
		file_proto_blockchain_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_blockchain_proto_rawDesc), len(file_proto_blockchain_proto_rawDesc)))
	})
	return file_proto_blockchain_proto_rawDescData
}

var file_proto_blockchain_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_blockchain_proto_goTypes = []any{
	(*Block)(nil),         // 0: blockchain.Block
	(*BlockProposal)(nil), // 1: blockchain.BlockProposal
	(*Vote)(nil),          // 2: blockchain.Vote
}
var file_proto_blockchain_proto_depIdxs = []int32{
	0, // 0: blockchain.BlockProposal.block:type_name -> blockchain.Block
	1, // 1: blockchain.BlockchainService.ProposeBlock:input_type -> blockchain.BlockProposal
	1, // 2: blockchain.BlockchainService.GetBlockByHash:input_type -> blockchain.BlockProposal
	2, // 3: blockchain.BlockchainService.ProposeBlock:output_type -> blockchain.Vote
	0, // 4: blockchain.BlockchainService.GetBlockByHash:output_type -> blockchain.Block
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_blockchain_proto_init() }
func file_proto_blockchain_proto_init() {
	if File_proto_blockchain_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_blockchain_proto_rawDesc), len(file_proto_blockchain_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_blockchain_proto_goTypes,
		DependencyIndexes: file_proto_blockchain_proto_depIdxs,
		MessageInfos:      file_proto_blockchain_proto_msgTypes,
	}.Build()
	File_proto_blockchain_proto = out.File
	file_proto_blockchain_proto_goTypes = nil
	file_proto_blockchain_proto_depIdxs = nil
}
